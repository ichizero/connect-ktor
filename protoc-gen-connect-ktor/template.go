package generator

import (
	"sync"
	"text/template"

	"github.com/ichizero/connect-ktor/protoc-gen-connect-ktor/internal/tmplfunc"
)

var loadTemplate = sync.OnceValues(func() (*template.Template, error) {
	return template.New("service_handler").Funcs(tmplfunc.Map).Parse(kotlinServiceTemplate)
})

type serviceData struct {
	ProtoPackageName string
	JavaPackageName  string
	SourceFileName   string
	Name             string
	Comment          string
	Methods          []*methodData
}

type methodData struct {
	Name           string
	Comment        string
	InputTypeName  string
	OutputTypeName string
}

const kotlinServiceTemplate = `// Code generated by connect-ktor. DO NOT EDIT.
//
// Source: {{ .SourceFileName }}
//
package {{ .JavaPackageName }}

import com.connectrpc.ResponseMessage
import io.github.ichizero.connect.ktor.handle
import io.ktor.resources.Resource
import io.ktor.server.application.ApplicationCall
import io.ktor.server.resources.post
import io.ktor.server.routing.Route

{{ .Comment -}}
interface {{ .Name }}HandlerInterface {
    {{- range .Methods }}
    {{- .Comment | nIndent 4 -}}
    suspend fun {{ .Name | toLowerFirst }}(request: {{ .InputTypeName }}, call: ApplicationCall): ResponseMessage<{{ .OutputTypeName }}>
    {{- end }}

    object Procedures {
        {{- range .Methods }}
        @Resource("/{{ $.ProtoPackageName }}.{{ $.Name }}/{{ .Name }}")
        class {{ .Name }}
        {{- end }}
    }
}

fun Route.{{ .Name | toLowerFirst }}(handler: {{ .Name }}HandlerInterface) {
    {{- range .Methods }}
    post<{{ $.Name }}HandlerInterface.Procedures.{{ .Name }}, SayRequest>(handle(handler::{{ .Name | toLowerFirst }}))
    {{- end }}
}
`
